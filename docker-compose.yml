version: '3.8'
services:
  postgres:
    image: postgres:13-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ecommerce
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  user-service:
    build:
      context: .
      dockerfile: ./user-service/Dockerfile.user
    restart: on-failure
    ports:
      - "8080:8080"
      - "50051:50051"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: ecommerce
      DB_SSLMODE: disable
      JWT_SECRET: test
      USER_SERVICE_PORT: 8080
      USER_GRPC_PORT: 50051
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ecommerce-network

  product-service:
    build:
      context: .
      dockerfile: ./product-service/Dockerfile.product
    restart: on-failure
    ports:
      - "8081:8081"
      - "50052:50052"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: ecommerce
      DB_SSLMODE: disable
      PRODUCT_SERVICE_PORT: 8081
      PRODUCT_GRPC_PORT: 50052
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ecommerce-network

  order-service:
    build:
      context: .
      dockerfile: ./order-service/Dockerfile.order
    restart: on-failure
    ports:
      - "8082:8082"
      - "50053:50053"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: ecommerce
      DB_SSLMODE: disable
      ORDER_SERVICE_PORT: 8082
      ORDER_GRPC_PORT: 50053
      ORDER_TIMEOUT_MINUTES: 15
      PRODUCT_SERVICE_GRPC_ADDR: product-service:50052
      WAREHOUSE_SERVICE_GRPC_ADDR: warehouse-service:50055
    depends_on:
      postgres:
        condition: service_healthy
      user-service:
        condition: service_started
      product-service:
        condition: service_started
    networks:
      - ecommerce-network

  shop-service:
    build:
      context: .
      dockerfile: ./shop-service/Dockerfile.shop
    restart: on-failure
    ports:
      - "8083:8083"
      - "50054:50054"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: ecommerce
      DB_SSLMODE: disable
      SHOP_SERVICE_PORT: 8083
      SHOP_GRPC_PORT: 50054
    depends_on:
      postgres:
        condition: service_healthy
      user-service:
        condition: service_started
    networks:
      - ecommerce-network

  warehouse-service:
    build:
      context: .
      dockerfile: ./warehouse-service/Dockerfile.warehouse
    restart: on-failure
    ports:
      - "8084:8084"
      - "50055:50055"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: ecommerce
      DB_SSLMODE: disable
      WAREHOUSE_SERVICE_PORT: 8084
      WAREHOUSE_GRPC_PORT: 50055
    depends_on:
      postgres:
        condition: service_healthy
      shop-service:
        condition: service_started
    networks:
      - ecommerce-network

volumes:
  postgres_data:

networks:
  ecommerce-network:
    driver: bridge